import 'dart:io';
import 'package:amplify_flutter/amplify_flutter.dart';
import 'package:amplify_auth_cognito/amplify_auth_cognito.dart';
import 'package:amplify_storage_s3/amplify_storage_s3.dart';
import 'amplify_outputs.dart'; // Generated by Amplify CLI
import 'package:aws_common/aws_common.dart';

import 'package:flutter/material.dart';
import 'package:flutter_spinkit/flutter_spinkit.dart';
import 'package:flutter/services.dart'; // For Platform Channels
import 'package:path_provider/path_provider.dart'; // For temporary file paths

import 'photo_list_screen.dart'; // For photo list screen
import 'storage_browser_screen.dart'; // For camera storage browser

// Define the method channel for native communication
const platform = MethodChannel('com.example.direct_sync_app/ptp');

void main() {
  runApp(const MyApp());
}

class MyApp extends StatefulWidget {
  const MyApp({super.key});

  @override
  State<MyApp> createState() => _MyAppState();
}

class _MyAppState extends State<MyApp> {
  // bool _amplifyConfigured = false;

  @override
  void initState() {
    super.initState();
    // _configureAmplify();
  }

  // Future<void> _configureAmplify() async {
  //   try {
  //     // Add the Amplify plugins
  //     final auth = AmplifyAuthCognito();
  //     final storage = AmplifyStorageS3();
  //     await Amplify.addPlugins([auth, storage]);

  //     // Configure Amplify
  //     // 'amplify_outputs.dart' is generated by the Amplify CLI
  //     await Amplify.configure(amplifyConfig);
  //     setState(() {
  //       _amplifyConfigured = true;
  //     });
  //     safePrint('Amplify configured successfully');
  //   } on AmplifyException catch (e) {
  //     safePrint('Error configuring Amplify: $e');
  //   }
  // }

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Canon R5 S3 Uploader',
      theme: ThemeData(primarySwatch: Colors.blue),
      home: const CameraS3UploaderScreen(),
    );
  }
}

class CameraS3UploaderScreen extends StatefulWidget {
  const CameraS3UploaderScreen({super.key});

  @override
  State<CameraS3UploaderScreen> createState() => _CameraS3UploaderScreenState();
}

class _CameraS3UploaderScreenState extends State<CameraS3UploaderScreen> {
  String _statusMessage = 'Waiting for camera connection...';
  bool _isUploading = false;
  String? _lastUploadedImagePath;
  Map<String, dynamic>? _deviceInfo;

  @override
  void initState() {
    super.initState();
    _listenForCameraEvents();

    // Start camera monitoring when the screen loads
    _startCameraMonitoring();
  }

  // Start monitoring for USB camera connections
  Future<void> _startCameraMonitoring() async {
    try {
      await platform.invokeMethod('startCameraMonitoring');
      setState(() {
        _statusMessage = 'Monitoring for camera connections...';
      });
    } catch (e) {
      setState(() {
        _statusMessage = 'Error starting camera monitoring: $e';
      });
    }
  }

  // This method handles all method calls from the platform channel
  Future<void> _handleMethodCall(MethodCall call) async {
    switch (call.method) {
      case 'photoDetected':
        _handlePhotoDetected(call);
        break;
      case 'captureComplete':
        _handleCaptureComplete(call);
        break;
      case 'deviceDetected':
        _handleDeviceDetected(call);
        break;
      case 'deviceDetailedInfo':
        _handleDetailedDeviceInfo(call);
        break;
      case 'permissionStatus':
        _handlePermissionStatus(call);
        break;
      case 'permissionStatusUpdate':
        _handlePermissionStatusUpdate(call);
        break;
      case 'cameraDisconnected':
        setState(() {
          _statusMessage = 'Camera disconnected';
          _deviceInfo = null;
        });
        break;
    }
  }

  // Handle device detection event
  void _handleDeviceDetected(MethodCall call) {
    final Map<String, dynamic> deviceInfo = Map<String, dynamic>.from(
      call.arguments,
    );

    setState(() {
      _deviceInfo = deviceInfo;
      _statusMessage =
          'USB Device detected: ${deviceInfo['productName'] ?? 'Unknown'} (${deviceInfo['vendorId']}:${deviceInfo['productId']})';
    });
  }

  // Handle detailed device info events
  void _handleDetailedDeviceInfo(MethodCall call) {
    final Map<String, dynamic> detailedInfo = Map<String, dynamic>.from(
      call.arguments,
    );
    setState(() {
      _deviceInfo = detailedInfo;
      _statusMessage =
          'Received detailed device info: ${detailedInfo['product'] ?? 'Unknown'}';
    });

    // Print to console for debugging
    print('üì± DETAILED DEVICE INFO:');
    detailedInfo.forEach((key, value) {
      print('  $key: $value');
    });
  }

  // Handle permission status updates
  void _handlePermissionStatus(MethodCall call) {
    final Map<String, dynamic> permissionInfo = Map<String, dynamic>.from(
      call.arguments,
    );
    final bool hasPermission =
        permissionInfo['hasPermission'] as bool? ?? false;
    final String deviceName =
        permissionInfo['deviceName'] as String? ?? 'Unknown device';

    setState(() {
      if (_statusMessage.contains('Permission')) {
        // Don't override more important status messages
        _statusMessage =
            'Permission for $deviceName: ${hasPermission ? 'Granted' : 'Denied'}';
      }
    });

    print(
      'üîë PERMISSION STATUS: ${hasPermission ? '‚úÖ Granted' : '‚ùå Denied'} for $deviceName',
    );
  }

  // Handle permission status updates
  void _handlePermissionStatusUpdate(MethodCall call) {
    final Map<String, dynamic> permissionInfo = Map<String, dynamic>.from(
      call.arguments,
    );
    final bool hasPermission =
        permissionInfo['hasPermission'] as bool? ?? false;
    final String deviceName =
        permissionInfo['deviceName'] as String? ?? 'Unknown device';
    final String vendorId = permissionInfo['vendorId'] as String? ?? 'Unknown';
    final String productId =
        permissionInfo['productId'] as String? ?? 'Unknown';

    setState(() {
      _statusMessage =
          'Permission Status: ${hasPermission ? '‚úÖ Granted' : '‚ùå Denied'} for $deviceName ($vendorId:$productId)';
    });

    print(
      'üîë PERMISSION STATUS UPDATE: ${hasPermission ? '‚úÖ Granted' : '‚ùå Denied'} for $deviceName ($vendorId:$productId)',
    );
  }

  // Handle photo detection event
  void _handlePhotoDetected(MethodCall call) {
    final Map<String, dynamic> photoData = Map<String, dynamic>.from(
      call.arguments,
    );
    final int objectHandle = photoData['objectHandle'] as int? ?? 0;
    final int timestamp = photoData['timestamp'] as int? ?? 0;

    setState(() {
      _statusMessage = 'üì∏ Photo detected! Handle: $objectHandle';
    });

    print(
      'üì∏ PHOTO DETECTED: Handle $objectHandle at ${DateTime.fromMillisecondsSinceEpoch(timestamp)}',
    );
  }

  // Handle capture complete event
  void _handleCaptureComplete(MethodCall call) {
    setState(() {
      _statusMessage = 'üì∏ Capture complete - waiting for image transfer...';
    });

    print('üì∏ CAPTURE COMPLETE: Camera finished taking photo');
  }

  // This method will be called when a new image is captured
  void _handleNewImage(MethodCall call) async {
    final String imagePath = call.arguments as String;
    setState(() {
      _statusMessage = 'New image received: ${imagePath.split('/').last}';
    });
    // _uploadImageToS3(imagePath);
  }

  void _listenForCameraEvents() {
    platform.setMethodCallHandler(_handleMethodCall);
    setState(() {
      _statusMessage = 'Listening for camera events...';
    });
  }

  // Future<void> _uploadImageToS3(String imagePath) async {
  //   setState(() {
  //     _isUploading = true;
  //     _statusMessage = 'Uploading ${imagePath.split('/').last} to S3...';
  //   });

  //   try {
  //     final file = File(imagePath);
  //     final key =
  //         'camera_uploads/${DateTime.now().millisecondsSinceEpoch}_${file.path.split('/').last}';

  //     // await Amplify.Storage.uploadFile(
  //     //   localFile: file,
  //     //   key: key,
  //     //   onProgress: (progress) {
  //     //     setState(() {
  //     //       _statusMessage =
  //     //           'Uploading: ${(progress.fractionCompleted * 100).toStringAsFixed(1)}%';
  //     //     });
  //     //   },
  //     // );

  //     setState(() {
  //       _statusMessage = 'Upload successful! Key: $key';
  //       _lastUploadedImagePath = imagePath;
  //     });
  //     _showSnackBar('Image uploaded successfully!');

  //     // Optionally, delete the local file after successful upload
  //     // await file.delete();
  //   } on StorageException catch (e) {
  //     setState(() {
  //       _statusMessage = 'Upload failed: ${e.message}';
  //     });
  //     _showSnackBar('S3 Upload Failed: ${e.message}');
  //     safePrint('Error uploading file: $e');
  //   } finally {
  //     setState(() {
  //       _isUploading = false;
  //     });
  //   }
  // }

  void _showSnackBar(String message) {
    ScaffoldMessenger.of(
      context,
    ).showSnackBar(SnackBar(content: Text(message)));
  }

  // Helper method to build consistent device info rows
  Widget _buildDeviceInfoRow(
    String label,
    String value, {
    bool highlight = false,
  }) {
    return Padding(
      padding: const EdgeInsets.symmetric(vertical: 4),
      child: Row(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          SizedBox(
            width: 120,
            child: Text(
              label,
              style: const TextStyle(
                fontWeight: FontWeight.w600,
                color: Colors.black87,
              ),
            ),
          ),
          Expanded(
            child: Text(
              value,
              style: TextStyle(
                color: highlight ? Colors.blue.shade800 : Colors.black,
                fontWeight: highlight ? FontWeight.bold : FontWeight.normal,
              ),
            ),
          ),
        ],
      ),
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('Canon R5 S3 Uploader'),
        actions: [
          // Button to browse camera storage
          IconButton(
            icon: const Icon(Icons.sd_storage),
            onPressed: () {
              Navigator.push(
                context,
                MaterialPageRoute(
                  builder: (context) => const StorageBrowserScreen(),
                ),
              );
            },
            tooltip: 'Browse Camera Storage',
          ),
          // Button to view already downloaded photos
          IconButton(
            icon: const Icon(Icons.photo_library),
            onPressed: () {
              Navigator.push(
                context,
                MaterialPageRoute(
                  builder: (context) => const PhotoListScreen(),
                ),
              );
            },
            tooltip: 'View Downloaded Photos',
          ),
        ],
      ),
      body: Center(
        child: Padding(
          padding: const EdgeInsets.all(16.0),
          child: Column(
            mainAxisAlignment: MainAxisAlignment.center,
            children: [
              Text(
                _statusMessage,
                textAlign: TextAlign.center,
                style: const TextStyle(fontSize: 18),
              ),
              const SizedBox(height: 20),

              // Display device info when available
              if (_deviceInfo != null)
                Container(
                  width: double.infinity,
                  padding: const EdgeInsets.all(16),
                  decoration: BoxDecoration(
                    border: Border.all(color: Colors.blue.shade200),
                    borderRadius: BorderRadius.circular(10),
                    color: Colors.blue.shade50,
                  ),
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      Text(
                        'USB Device Details',
                        style: TextStyle(
                          fontWeight: FontWeight.bold,
                          fontSize: 18,
                          color: Colors.blue.shade700,
                        ),
                      ),
                      const Divider(),
                      _buildDeviceInfoRow(
                        'Device Name:',
                        _deviceInfo!['deviceName'] ?? 'N/A',
                      ),
                      _buildDeviceInfoRow(
                        'Manufacturer:',
                        _deviceInfo!['manufacturerName'] ?? 'N/A',
                      ),
                      _buildDeviceInfoRow(
                        'Product:',
                        _deviceInfo!['productName'] ?? 'N/A',
                      ),
                      _buildDeviceInfoRow(
                        'Vendor ID:',
                        _deviceInfo!['vendorId'] ?? 'N/A',
                        highlight: true,
                      ),
                      _buildDeviceInfoRow(
                        'Product ID:',
                        _deviceInfo!['productId'] ?? 'N/A',
                        highlight: true,
                      ),
                      _buildDeviceInfoRow(
                        'Interface Count:',
                        '${_deviceInfo!['interfaceCount'] ?? 'N/A'}',
                      ),
                    ],
                  ),
                ),
              const SizedBox(height: 20),
              if (_isUploading)
                const SpinKitCircle(color: Colors.blue, size: 50.0),
              if (_lastUploadedImagePath != null && !_isUploading)
                Padding(
                  padding: const EdgeInsets.only(top: 20.0),
                  child: Image.file(
                    File(_lastUploadedImagePath!),
                    height: 200,
                    fit: BoxFit.contain,
                  ),
                ),
              const SizedBox(height: 20),

              // Permission check button
              ElevatedButton(
                onPressed: () async {
                  try {
                    setState(() {
                      _statusMessage = 'Checking USB permissions...';
                    });
                    await platform.invokeMethod('checkPermissions');
                  } catch (e) {
                    setState(() {
                      _statusMessage = 'Error checking permissions: $e';
                    });
                  }
                },
                child: const Text('Check USB Permissions'),
              ),

              const SizedBox(height: 10),

              // Request permission button - only show if device info is available and doesn't have permission
              if (_deviceInfo != null &&
                  !(_deviceInfo?['hasPermission'] ?? true))
                ElevatedButton(
                  onPressed: () async {
                    try {
                      setState(() {
                        _statusMessage = 'Requesting permission...';
                      });
                      await platform.invokeMethod('requestPermission', {
                        'deviceId': _deviceInfo!['deviceName'],
                      });
                    } catch (e) {
                      setState(() {
                        _statusMessage = 'Error requesting permission: $e';
                      });
                    }
                  },
                  style: ElevatedButton.styleFrom(
                    backgroundColor: Colors.green,
                  ),
                  child: const Text('Request USB Permission'),
                ),

              const SizedBox(height: 20),
              // This button is just for demonstration if you want to manually trigger a fake image
              // In a real scenario, the native side would push images.
              ElevatedButton(
                onPressed:
                    _isUploading
                        ? null
                        : () async {
                          // Simulate receiving an image from native side
                          final tempDir = await getTemporaryDirectory();
                          final testFile = File(
                            '${tempDir.path}/test_image_${DateTime.now().millisecondsSinceEpoch}.jpg',
                          );
                          // Create a dummy file for testing S3 upload
                          await testFile.writeAsBytes(
                            List.generate(1024 * 100, (index) => index % 256),
                          ); // 100KB dummy file
                          _handleNewImage(
                            MethodCall('newImageCaptured', testFile.path),
                          );
                        },
                child: const Text('Simulate New Image (for S3 test)'),
              ),

              const SizedBox(height: 20),

              // Button to view downloaded photos list
              ElevatedButton(
                onPressed: () {
                  Navigator.push(
                    context,
                    MaterialPageRoute(
                      builder: (context) => const PhotoListScreen(),
                    ),
                  );
                },
                style: ElevatedButton.styleFrom(
                  backgroundColor: Colors.blue.shade700,
                ),
                child: const Text('View Downloaded Photos'),
              ),
            ],
          ),
        ),
      ),
    );
  }
}
